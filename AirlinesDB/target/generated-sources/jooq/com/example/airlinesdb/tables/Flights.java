/*
 * This file is generated by jOOQ.
 */
package com.example.airlinesdb.tables;


import com.example.airlinesdb.Public;
import com.example.airlinesdb.tables.records.FlightsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flights extends TableImpl<FlightsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.FLIGHTS</code>
     */
    public static final Flights FLIGHTS = new Flights();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlightsRecord> getRecordType() {
        return FlightsRecord.class;
    }

    /**
     * The column <code>PUBLIC.FLIGHTS.ID</code>.
     */
    public final TableField<FlightsRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FLIGHTS.DATE</code>.
     */
    public final TableField<FlightsRecord, Long> DATE = createField(DSL.name("DATE"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FLIGHTS.AIRPLANE_ID</code>.
     */
    public final TableField<FlightsRecord, Integer> AIRPLANE_ID = createField(DSL.name("AIRPLANE_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FLIGHTS.DEPARTURE_AIRPORT_ID</code>.
     */
    public final TableField<FlightsRecord, Integer> DEPARTURE_AIRPORT_ID = createField(DSL.name("DEPARTURE_AIRPORT_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FLIGHTS.DESTINATION_AIRPORT_ID</code>.
     */
    public final TableField<FlightsRecord, Integer> DESTINATION_AIRPORT_ID = createField(DSL.name("DESTINATION_AIRPORT_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    private Flights(Name alias, Table<FlightsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Flights(Name alias, Table<FlightsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.FLIGHTS</code> table reference
     */
    public Flights(String alias) {
        this(DSL.name(alias), FLIGHTS);
    }

    /**
     * Create an aliased <code>PUBLIC.FLIGHTS</code> table reference
     */
    public Flights(Name alias) {
        this(alias, FLIGHTS);
    }

    /**
     * Create a <code>PUBLIC.FLIGHTS</code> table reference
     */
    public Flights() {
        this(DSL.name("FLIGHTS"), null);
    }

    public <O extends Record> Flights(Table<O> child, ForeignKey<O, FlightsRecord> key) {
        super(child, key, FLIGHTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Flights as(String alias) {
        return new Flights(DSL.name(alias), this);
    }

    @Override
    public Flights as(Name alias) {
        return new Flights(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Flights rename(String name) {
        return new Flights(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flights rename(Name name) {
        return new Flights(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
