/*
 * This file is generated by jOOQ.
 */
package com.example.airlinesdb.tables;


import com.example.airlinesdb.Public;
import com.example.airlinesdb.tables.records.AirportsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Airports extends TableImpl<AirportsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.AIRPORTS</code>
     */
    public static final Airports AIRPORTS = new Airports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AirportsRecord> getRecordType() {
        return AirportsRecord.class;
    }

    /**
     * The column <code>PUBLIC.AIRPORTS.ID</code>.
     */
    public final TableField<AirportsRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.AIRPORTS.NAME</code>.
     */
    public final TableField<AirportsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>PUBLIC.AIRPORTS.COUNTRY_ID</code>.
     */
    public final TableField<AirportsRecord, Integer> COUNTRY_ID = createField(DSL.name("COUNTRY_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    private Airports(Name alias, Table<AirportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Airports(Name alias, Table<AirportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.AIRPORTS</code> table reference
     */
    public Airports(String alias) {
        this(DSL.name(alias), AIRPORTS);
    }

    /**
     * Create an aliased <code>PUBLIC.AIRPORTS</code> table reference
     */
    public Airports(Name alias) {
        this(alias, AIRPORTS);
    }

    /**
     * Create a <code>PUBLIC.AIRPORTS</code> table reference
     */
    public Airports() {
        this(DSL.name("AIRPORTS"), null);
    }

    public <O extends Record> Airports(Table<O> child, ForeignKey<O, AirportsRecord> key) {
        super(child, key, AIRPORTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Airports as(String alias) {
        return new Airports(DSL.name(alias), this);
    }

    @Override
    public Airports as(Name alias) {
        return new Airports(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Airports rename(String name) {
        return new Airports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Airports rename(Name name) {
        return new Airports(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
